import * as chai from "chai";
import { DeviceType, IDiscoveredDevice } from "../../src/discovery/model";
import { RemotePlayRegistration } from "../../src/remoteplay/registration";
import { RemotePlayCrypto } from "../../src/remoteplay/crypto";

chai.should();

function fakeDevice(type: DeviceType): IDiscoveredDevice {
    return {
        type,
    } as any;
}

describe("RemotePlayRegistration", () => {
    it("generates the expected data for PS5", () => {
        // NOTE: test data and expected output generated by chiaki

        const accountId = "AAAAAAAAAEI=";
        const pin = "13374201";
        const device = fakeDevice(DeviceType.PS5);
        const nonce = Buffer.from([
            0x13, 0x37, 0xde, 0xad, 0xbe, 0xef, 0xc0, 0xff,
            0xee, 0x42, 0x63, 0x68, 0x69, 0x61, 0x6b, 0x69,
        ]);

        const crypto = RemotePlayCrypto.forDeviceAndPin(device, pin, nonce);
        const registration = new RemotePlayRegistration();
        const payload = registration.createPayload(crypto, device, {
            accountId,
            pin,
        });

        const expected = `
            4141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414167dd36ad47d4c2ce41414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141418ed494ee70eba06b4141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141b444c33edc7eaca50ca55f7988c31ec4fd893b5c64dd7741a324f483ee61919bdfc5b712343be1c66fb6ec0fc6f38bd6c653bd501115aaa75ed916405b312627fd8a98949dc8b245507cb7ec4fde1bdac6bd449964b3d6cedfc0dd95f39e4e4718c47c23bb45499830c465
            `.trim();

        payload.toString("hex").length.should.deep.equal(expected.length);
        payload.toString("hex").should.deep.equal(expected);
    });
});
